rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Global sources collection
    match /sources/{sourceId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow reading all sources for authenticated users
      allow read: if isAuthenticated();
      
      // Allow update/delete only for source owner
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    // Project rules
    match /projects/{projectId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read, update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);

      // Project sources subcollection
      match /sources/{sourceId} {
        allow read, write: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.userId);
      }
    }

    // User settings
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated() && isOwner(userId);
      
      // Allow cascading deletes when account is deleted
      function isValidDelete() {
        return request.auth.uid == userId;
      }
    }

    // Projects with cascade delete
    match /projects/{projectId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read, update: if isAuthenticated() && 
        isOwner(resource.data.userId);
        
      allow delete: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isValidDelete());
    }

    // Sources with cascade delete
    match /sources/{sourceId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read: if isAuthenticated();
      
      allow update, delete: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isValidDelete());
    }
  }
} 