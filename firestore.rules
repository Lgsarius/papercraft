rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Project rules
    match /projects/{projectId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read, update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    // Source rules
    match /sources/{sourceId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read, update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);

      // Validate source data
      function isValidSource() {
        let data = request.resource.data;
        return data.title is string && 
               data.title.size() > 0 && 
               data.authors is list &&
               data.year is string &&
               data.source is string &&
               data.type in ['book', 'article', 'website'] &&
               data.userId == request.auth.uid &&
               data.createdAt is timestamp &&
               data.updatedAt is timestamp;
      }
    }
  }
} 